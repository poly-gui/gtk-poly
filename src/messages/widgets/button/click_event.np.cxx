// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "click_event.np.hxx"

Poly::Message::ClickEvent::ClickEvent(int32_t timestamp)
    : timestamp(timestamp) {}

Poly::Message::ClickEvent::ClickEvent(const NanoPack::Reader &reader,
                                      int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 8;

  const int32_t timestamp = reader.read_int32(ptr);
  ptr += 4;
  this->timestamp = timestamp;

  bytes_read = ptr;
}

Poly::Message::ClickEvent::ClickEvent(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : ClickEvent(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::ClickEvent::type_id() const { return TYPE_ID; }

std::vector<uint8_t> Poly::Message::ClickEvent::data() const {
  std::vector<uint8_t> buf(8);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_int32(timestamp);

  return buf;
}

std::vector<uint8_t>
Poly::Message::ClickEvent::data_with_length_prefix() const {
  std::vector<uint8_t> buf(8 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_int32(timestamp);

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
