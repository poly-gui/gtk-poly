// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "click_event.np.hxx"

Poly::Message::ClickEvent::ClickEvent(int32_t timestamp)
    : timestamp(timestamp) {}

Poly::Message::ClickEvent::ClickEvent(const NanoPack::Reader &reader,
                                      int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 8;

  const int32_t timestamp = reader.read_int32(ptr);
  ptr += 4;
  this->timestamp = timestamp;

  bytes_read = ptr;
}

Poly::Message::ClickEvent::ClickEvent(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : ClickEvent(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::ClickEvent::type_id() const { return TYPE_ID; }

int Poly::Message::ClickEvent::header_size() const { return 8; }

size_t Poly::Message::ClickEvent::write_to(std::vector<uint8_t> &buf,
                                           int offset) const {
  size_t bytes_written = 8;

  buf.resize(offset + 8);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  NanoPack::write_field_size(0, 4, offset, buf);
  NanoPack::append_int32(timestamp, buf);
  bytes_written += 4;

  return bytes_written;
}

std::vector<uint8_t> Poly::Message::ClickEvent::data() const {
  std::vector<uint8_t> buf(8);
  write_to(buf, 0);
  return buf;
}
