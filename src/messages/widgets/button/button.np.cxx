// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "button.np.hxx"

Poly::Message::Button::Button(std::optional<int32_t> tag, std::string text,
                              int32_t on_click)
    : Widget(tag), text(std::move(text)), on_click(on_click) {}

Poly::Message::Button::Button(const NanoPack::Reader &reader, int &bytes_read)
    : Widget() {
  const auto begin = reader.begin();
  int ptr = 16;

  if (reader.read_field_size(0) < 0) {
    this->tag = std::nullopt;
  } else {
    const int32_t tag = reader.read_int32(ptr);
    ptr += 4;
    this->tag = tag;
  }

  const int32_t text_size = reader.read_field_size(1);
  text = reader.read_string(ptr, text_size);
  ptr += text_size;

  const int32_t on_click = reader.read_int32(ptr);
  ptr += 4;
  this->on_click = on_click;

  bytes_read = ptr;
}

Poly::Message::Button::Button(std::vector<uint8_t>::const_iterator begin,
                              int &bytes_read)
    : Button(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::Button::type_id() const { return TYPE_ID; }

int Poly::Message::Button::header_size() const { return 16; }

size_t Poly::Message::Button::write_to(std::vector<uint8_t> &buf,
                                       int offset) const {
  size_t bytes_written = 16;

  buf.resize(offset + 16);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    NanoPack::write_field_size(0, 4, offset, buf);
    NanoPack::append_int32(tag, buf);
    bytes_written += 4;
  } else {
    NanoPack::write_field_size(0, -1, offset, buf);
  }

  NanoPack::write_field_size(1, text.size(), offset, buf);
  NanoPack::append_string(text, buf);
  bytes_written += text.size();

  NanoPack::write_field_size(2, 4, offset, buf);
  NanoPack::append_int32(on_click, buf);
  bytes_written += 4;

  return bytes_written;
}

std::vector<uint8_t> Poly::Message::Button::data() const {
  std::vector<uint8_t> buf(16);
  write_to(buf, 0);
  return buf;
}
