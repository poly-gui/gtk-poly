// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "center.np.hxx"

Poly::Message::Center::Center(std::optional<int32_t> tag,
                              std::unique_ptr<Widget> child)
    : Widget(tag), child(std::move(child)) {}

Poly::Message::Center::Center(const NanoPack::Reader &reader, int &bytes_read)
    : Widget() {
  const auto begin = reader.begin();
  int ptr = 12;

  if (reader.read_field_size(0) < 0) {
    this->tag = std::nullopt;
  } else {
    const int32_t tag = reader.read_int32(ptr);
    ptr += 4;
    this->tag = tag;
  }

  int child_bytes_read = 0;
  child = std::move(make_widget(begin + ptr, child_bytes_read));
  ptr += child_bytes_read;

  bytes_read = ptr;
}

Poly::Message::Center::Center(std::vector<uint8_t>::const_iterator begin,
                              int &bytes_read)
    : Center(NanoPack::Reader(begin), bytes_read) {}

Poly::Message::Widget &Poly::Message::Center::get_child() const {
  return *child;
}

int32_t Poly::Message::Center::type_id() const { return TYPE_ID; }

std::vector<uint8_t> Poly::Message::Center::data() const {
  std::vector<uint8_t> buf(12);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    writer.write_field_size(0, 4);
    writer.append_int32(tag);
  } else {
    writer.write_field_size(0, -1);
  }

  const std::vector<uint8_t> child_data = child->data();
  writer.append_bytes(child_data);
  writer.write_field_size(1, child_data.size());

  return buf;
}
