// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "row.np.hxx"

Poly::Message::Row::Row(std::optional<int32_t> tag, double width, double height,
                        const Alignment &horizontal_alignment,
                        const Alignment &vertical_alignment,
                        std::vector<std::unique_ptr<Widget>> children)
    : Widget(tag), width(width), height(height),
      horizontal_alignment(horizontal_alignment),
      vertical_alignment(vertical_alignment), children(std::move(children)) {}

Poly::Message::Row::Row(const NanoPack::Reader &reader, int &bytes_read)
    : Widget() {
  const auto begin = reader.begin();
  int ptr = 28;

  if (reader.read_field_size(0) < 0) {
    this->tag = std::nullopt;
  } else {
    const int32_t tag = reader.read_int32(ptr);
    ptr += 4;
    this->tag = tag;
  }

  const double width = reader.read_double(ptr);
  ptr += 8;
  this->width = width;

  const double height = reader.read_double(ptr);
  ptr += 8;
  this->height = height;

  const int8_t horizontal_alignment_raw_value = reader.read_int8(ptr);
  ptr += 1;
  horizontal_alignment = Alignment(horizontal_alignment_raw_value);

  const int8_t vertical_alignment_raw_value = reader.read_int8(ptr);
  ptr += 1;
  vertical_alignment = Alignment(vertical_alignment_raw_value);

  const int32_t children_vec_size = reader.read_int32(ptr);
  ptr += 4;
  std::vector<std::unique_ptr<Widget>> children;
  children.reserve(children_vec_size);
  for (int i = 0; i < children_vec_size; i++) {
    int i_item_bytes_read = 0;
    std::unique_ptr i_item =
        std::move(make_widget(begin + ptr, i_item_bytes_read));
    ptr += i_item_bytes_read;
    children.emplace_back(std::move(i_item));
  }
  this->children = std::move(children);

  bytes_read = ptr;
}

Poly::Message::Row::Row(std::vector<uint8_t>::const_iterator begin,
                        int &bytes_read)
    : Row(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::Row::type_id() const { return TYPE_ID; }

std::vector<uint8_t> Poly::Message::Row::data() const {
  std::vector<uint8_t> buf(28);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    writer.write_field_size(0, 4);
    writer.append_int32(tag);
  } else {
    writer.write_field_size(0, -1);
  }

  writer.write_field_size(1, 8);
  writer.append_double(width);

  writer.write_field_size(2, 8);
  writer.append_double(height);

  writer.write_field_size(3, 1);
  writer.append_int8(horizontal_alignment.value());

  writer.write_field_size(4, 1);
  writer.append_int8(vertical_alignment.value());

  const size_t children_vec_size = children.size();
  writer.append_int32(children_vec_size);
  int32_t children_byte_size = sizeof(int32_t);
  for (auto &i : children) {
    const std::vector<uint8_t> i_data = i->data();
    writer.append_bytes(i_data);
    children_byte_size += i_data.size();
  }
  writer.write_field_size(5, children_byte_size);

  return buf;
}

std::vector<uint8_t> Poly::Message::Row::data_with_length_prefix() const {
  std::vector<uint8_t> buf(28 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    writer.write_field_size(0, 4);
    writer.append_int32(tag);
  } else {
    writer.write_field_size(0, -1);
  }

  writer.write_field_size(1, 8);
  writer.append_double(width);

  writer.write_field_size(2, 8);
  writer.append_double(height);

  writer.write_field_size(3, 1);
  writer.append_int8(horizontal_alignment.value());

  writer.write_field_size(4, 1);
  writer.append_int8(vertical_alignment.value());

  const size_t children_vec_size = children.size();
  writer.append_int32(children_vec_size);
  int32_t children_byte_size = sizeof(int32_t);
  for (auto &i : children) {
    const std::vector<uint8_t> i_data = i->data();
    writer.append_bytes(i_data);
    children_byte_size += i_data.size();
  }
  writer.write_field_size(5, children_byte_size);

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
