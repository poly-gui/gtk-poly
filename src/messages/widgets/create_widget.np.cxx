// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "create_widget.np.hxx"

Poly::Message::CreateWidget::CreateWidget(std::unique_ptr<Widget> widget,
                                          std::string window_tag)
    : widget(std::move(widget)), window_tag(std::move(window_tag)) {}

Poly::Message::CreateWidget::CreateWidget(const NanoPack::Reader &reader,
                                          int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 12;

  int widget_bytes_read = 0;
  widget = std::move(make_widget(begin + ptr, widget_bytes_read));
  ptr += widget_bytes_read;

  const int32_t window_tag_size = reader.read_field_size(1);
  window_tag = reader.read_string(ptr, window_tag_size);
  ptr += window_tag_size;

  bytes_read = ptr;
}

Poly::Message::CreateWidget::CreateWidget(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : CreateWidget(NanoPack::Reader(begin), bytes_read) {}

Poly::Message::Widget &Poly::Message::CreateWidget::get_widget() const {
  return *widget;
}

NanoPack::TypeId Poly::Message::CreateWidget::type_id() const {
  return TYPE_ID;
}

int Poly::Message::CreateWidget::header_size() const { return 12; }

size_t Poly::Message::CreateWidget::write_to(std::vector<uint8_t> &buf,
                                             int offset) const {
  size_t bytes_written = 12;

  buf.resize(offset + 12);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  const size_t widget_byte_size = widget->write_to(buf, buf.size());
  NanoPack::write_field_size(0, widget_byte_size, offset, buf);

  NanoPack::write_field_size(1, window_tag.size(), offset, buf);
  NanoPack::append_string(window_tag, buf);
  bytes_written += window_tag.size();

  return bytes_written;
}

std::vector<uint8_t> Poly::Message::CreateWidget::data() const {
  std::vector<uint8_t> buf(12);
  write_to(buf, 0);
  return buf;
}
