// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "create_widget.np.hxx"

CreateWidget::CreateWidget(Widget widget, std::string window_tag)
    : widget(widget), window_tag(std::move(window_tag)) {}

CreateWidget::CreateWidget(const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 12;

  int widget_bytes_read = 0;
  widget = Widget(begin + ptr, widget_bytes_read);
  ptr += widget_bytes_read;

  const int32_t window_tag_size = reader.read_field_size(1);
  window_tag = reader.read_string(ptr, window_tag_size);
  ptr += window_tag_size;

  bytes_read = ptr;
}

CreateWidget::CreateWidget(std::vector<uint8_t>::const_iterator begin,
                           int &bytes_read)
    : CreateWidget(NanoPack::Reader(begin), bytes_read) {}

int32_t CreateWidget::type_id() const { return TYPE_ID; }

std::vector<uint8_t> CreateWidget::data() const {
  std::vector<uint8_t> buf(12);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  const std::vector<uint8_t> widget_data = widget.data();
  writer.append_bytes(widget_data);
  writer.write_field_size(0, widget_data.size());

  writer.write_field_size(1, window_tag.size());
  writer.append_string(window_tag);

  return buf;
}
