// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "text.np.hxx"

Poly::Message::Text::Text(std::optional<int32_t> tag, std::string content,
                          FontStyle style)
    : Widget(tag), content(std::move(content)), style(style) {}

Poly::Message::Text::Text(const NanoPack::Reader &reader, int &bytes_read)
    : Widget() {
  const auto begin = reader.begin();
  int ptr = 16;

  if (reader.read_field_size(0) < 0) {
    this->tag = std::nullopt;
  } else {
    const int32_t tag = reader.read_int32(ptr);
    ptr += 4;
    this->tag = tag;
  }

  const int32_t content_size = reader.read_field_size(1);
  content = reader.read_string(ptr, content_size);
  ptr += content_size;

  int style_bytes_read = 0;
  style = FontStyle(begin + ptr, style_bytes_read);
  ptr += style_bytes_read;

  bytes_read = ptr;
}

Poly::Message::Text::Text(std::vector<uint8_t>::const_iterator begin,
                          int &bytes_read)
    : Text(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::Text::type_id() const { return TYPE_ID; }

int Poly::Message::Text::header_size() const { return 16; }

size_t Poly::Message::Text::write_to(std::vector<uint8_t> &buf,
                                     int offset) const {
  size_t bytes_written = 16;

  buf.resize(offset + 16);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    NanoPack::write_field_size(0, 4, offset, buf);
    NanoPack::append_int32(tag, buf);
    bytes_written += 4;
  } else {
    NanoPack::write_field_size(0, -1, offset, buf);
  }

  NanoPack::write_field_size(1, content.size(), offset, buf);
  NanoPack::append_string(content, buf);
  bytes_written += content.size();

  const size_t style_byte_size = style.write_to(buf, buf.size());
  NanoPack::write_field_size(2, style_byte_size, offset, buf);

  return bytes_written;
}

std::vector<uint8_t> Poly::Message::Text::data() const {
  std::vector<uint8_t> buf(16);
  write_to(buf, 0);
  return buf;
}
