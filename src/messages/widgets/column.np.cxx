// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "column.np.hxx"

Poly::Message::Column::Column(std::optional<int32_t> tag, double width,
                              double height,
                              const Alignment &horizontal_alignment,
                              const Alignment &vertical_alignment,
                              std::vector<std::unique_ptr<Widget>> children)
    : Widget(tag), width(width), height(height),
      horizontal_alignment(horizontal_alignment),
      vertical_alignment(vertical_alignment), children(std::move(children)) {}

Poly::Message::Column::Column(const NanoPack::Reader &reader, int &bytes_read)
    : Widget() {
  const auto begin = reader.begin();
  int ptr = 28;

  if (reader.read_field_size(0) < 0) {
    this->tag = std::nullopt;
  } else {
    const int32_t tag = reader.read_int32(ptr);
    ptr += 4;
    this->tag = tag;
  }

  const double width = reader.read_double(ptr);
  ptr += 8;
  this->width = width;

  const double height = reader.read_double(ptr);
  ptr += 8;
  this->height = height;

  const int8_t horizontal_alignment_raw_value = reader.read_int8(ptr);
  ptr += 1;
  horizontal_alignment = Alignment(horizontal_alignment_raw_value);

  const int8_t vertical_alignment_raw_value = reader.read_int8(ptr);
  ptr += 1;
  vertical_alignment = Alignment(vertical_alignment_raw_value);

  const int32_t children_vec_size = reader.read_int32(ptr);
  ptr += 4;
  std::vector<std::unique_ptr<Widget>> children;
  children.reserve(children_vec_size);
  for (int i = 0; i < children_vec_size; i++) {
    int i_item_bytes_read = 0;
    std::unique_ptr i_item =
        std::move(make_widget(begin + ptr, i_item_bytes_read));
    ptr += i_item_bytes_read;
    children.emplace_back(std::move(i_item));
  }
  this->children = std::move(children);

  bytes_read = ptr;
}

Poly::Message::Column::Column(std::vector<uint8_t>::const_iterator begin,
                              int &bytes_read)
    : Column(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::Column::type_id() const { return TYPE_ID; }

int Poly::Message::Column::header_size() const { return 28; }

size_t Poly::Message::Column::write_to(std::vector<uint8_t> &buf,
                                       int offset) const {
  size_t bytes_written = 28;

  buf.resize(offset + 28);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    NanoPack::write_field_size(0, 4, offset, buf);
    NanoPack::append_int32(tag, buf);
    bytes_written += 4;
  } else {
    NanoPack::write_field_size(0, -1, offset, buf);
  }

  NanoPack::write_field_size(1, 8, offset, buf);
  NanoPack::append_double(width, buf);
  bytes_written += 8;

  NanoPack::write_field_size(2, 8, offset, buf);
  NanoPack::append_double(height, buf);
  bytes_written += 8;

  NanoPack::write_field_size(3, 1, offset, buf);
  NanoPack::append_int8(horizontal_alignment.value(), buf);
  bytes_written += 1;

  NanoPack::write_field_size(4, 1, offset, buf);
  NanoPack::append_int8(vertical_alignment.value(), buf);
  bytes_written += 1;

  const size_t children_vec_size = children.size();
  NanoPack::append_int32(children_vec_size, buf);
  int32_t children_byte_size = sizeof(int32_t);
  for (auto &i : children) {
    const size_t i_byte_size = i->write_to(buf, buf.size());
    children_byte_size += i_byte_size;
  }
  NanoPack::write_field_size(5, children_byte_size, offset, buf);
  bytes_written += children_byte_size;

  return bytes_written;
}

std::vector<uint8_t> Poly::Message::Column::data() const {
  std::vector<uint8_t> buf(28);
  write_to(buf, 0);
  return buf;
}
