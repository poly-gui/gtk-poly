// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "text_field.np.hxx"

Poly::Message::TextField::TextField(std::optional<int32_t> tag,
                                    std::optional<std::string> placeholder,
                                    std::string value, int32_t on_value_changed)
    : Widget(tag), placeholder(std::move(placeholder)), value(std::move(value)),
      on_value_changed(on_value_changed) {}

Poly::Message::TextField::TextField(const NanoPack::Reader &reader,
                                    int &bytes_read)
    : Widget() {
  const auto begin = reader.begin();
  int ptr = 20;

  if (reader.read_field_size(0) < 0) {
    this->tag = std::nullopt;
  } else {
    const int32_t tag = reader.read_int32(ptr);
    ptr += 4;
    this->tag = tag;
  }

  if (reader.read_field_size(1) < 0) {
    this->placeholder = std::nullopt;
  } else {
    const int32_t placeholder_size = reader.read_field_size(1);
    placeholder = reader.read_string(ptr, placeholder_size);
    ptr += placeholder_size;
  }

  const int32_t value_size = reader.read_field_size(2);
  value = reader.read_string(ptr, value_size);
  ptr += value_size;

  const int32_t on_value_changed = reader.read_int32(ptr);
  ptr += 4;
  this->on_value_changed = on_value_changed;

  bytes_read = ptr;
}

Poly::Message::TextField::TextField(std::vector<uint8_t>::const_iterator begin,
                                    int &bytes_read)
    : TextField(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::TextField::type_id() const { return TYPE_ID; }

std::vector<uint8_t> Poly::Message::TextField::data() const {
  std::vector<uint8_t> buf(20);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    writer.write_field_size(0, 4);
    writer.append_int32(tag);
  } else {
    writer.write_field_size(0, -1);
  }

  if (placeholder.has_value()) {
    const auto placeholder = this->placeholder.value();
    writer.write_field_size(1, placeholder.size());
    writer.append_string(placeholder);
  } else {
    writer.write_field_size(1, -1);
  }

  writer.write_field_size(2, value.size());
  writer.append_string(value);

  writer.write_field_size(3, 4);
  writer.append_int32(on_value_changed);

  return buf;
}

std::vector<uint8_t> Poly::Message::TextField::data_with_length_prefix() const {
  std::vector<uint8_t> buf(20 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    writer.write_field_size(0, 4);
    writer.append_int32(tag);
  } else {
    writer.write_field_size(0, -1);
  }

  if (placeholder.has_value()) {
    const auto placeholder = this->placeholder.value();
    writer.write_field_size(1, placeholder.size());
    writer.append_string(placeholder);
  } else {
    writer.write_field_size(1, -1);
  }

  writer.write_field_size(2, value.size());
  writer.append_string(value);

  writer.write_field_size(3, 4);
  writer.append_int32(on_value_changed);

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
