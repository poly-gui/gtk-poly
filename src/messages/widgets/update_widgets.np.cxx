// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "update_widgets.np.hxx"

Poly::Message::UpdateWidgets::UpdateWidgets(std::vector<UpdateWidget> updates)
    : updates(std::move(updates)) {}

Poly::Message::UpdateWidgets::UpdateWidgets(const NanoPack::Reader &reader,
                                            int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 8;

  const int32_t updates_vec_size = reader.read_int32(ptr);
  ptr += 4;
  std::vector<UpdateWidget> updates;
  updates.reserve(updates_vec_size);
  for (int i = 0; i < updates_vec_size; i++) {
    int i_item_bytes_read = 0;
    UpdateWidget i_item(begin + ptr, i_item_bytes_read);
    ptr += i_item_bytes_read;
    updates.emplace_back(std::move(i_item));
  }
  this->updates = std::move(updates);

  bytes_read = ptr;
}

Poly::Message::UpdateWidgets::UpdateWidgets(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : UpdateWidgets(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::UpdateWidgets::type_id() const {
  return TYPE_ID;
}

int Poly::Message::UpdateWidgets::header_size() const { return 8; }

size_t Poly::Message::UpdateWidgets::write_to(std::vector<uint8_t> &buf,
                                              int offset) const {
  size_t bytes_written = 8;

  buf.resize(offset + 8);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  const size_t updates_vec_size = updates.size();
  NanoPack::append_int32(updates_vec_size, buf);
  int32_t updates_byte_size = sizeof(int32_t);
  for (auto &i : updates) {
    const size_t i_byte_size = i.write_to(buf, buf.size());
    updates_byte_size += i_byte_size;
  }
  NanoPack::write_field_size(0, updates_byte_size, offset, buf);
  bytes_written += updates_byte_size;

  return bytes_written;
}

std::vector<uint8_t> Poly::Message::UpdateWidgets::data() const {
  std::vector<uint8_t> buf(8);
  write_to(buf, 0);
  return buf;
}
