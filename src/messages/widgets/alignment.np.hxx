// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#ifndef ALIGNMENT_ENUM_NP_HXX
#define ALIGNMENT_ENUM_NP_HXX

#include <array>
#include <stdexcept>

class Alignment {
public:
  enum AlignmentMember {
    START,
    END,
    TOP,
    BOTTOM,
    CENTER,
    SPACE_BETWEEN,
    SPACE_AROUND,
    SPACE_EVENLY,
  };

private:
  constexpr static std::array<int8_t, 8> values = {
      0, 1, 2, 3, 4, 5, 6, 7,
  };
  AlignmentMember enum_value;
  int8_t _value;

public:
  Alignment() = default;

  explicit Alignment(const int8_t &value) {
    switch (value) {
    case 0:
      enum_value = START;
      break;
    case 1:
      enum_value = END;
      break;
    case 2:
      enum_value = TOP;
      break;
    case 3:
      enum_value = BOTTOM;
      break;
    case 4:
      enum_value = CENTER;
      break;
    case 5:
      enum_value = SPACE_BETWEEN;
      break;
    case 6:
      enum_value = SPACE_AROUND;
      break;
    case 7:
      enum_value = SPACE_EVENLY;
      break;
    default:
      throw std::runtime_error("invalid value for enum Alignment");
    }
    _value = values[enum_value];
  }

  constexpr Alignment(AlignmentMember member)
      : enum_value(member), _value(values[member]) {}

  [[nodiscard]] constexpr const int8_t &value() const { return _value; }

  constexpr operator AlignmentMember() const { return enum_value; }

  explicit operator bool() const = delete;
};

#endif
