// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "update_widget.np.hxx"

Poly::Message::UpdateWidget::UpdateWidget(int32_t tag,
                                          std::unique_ptr<Widget> widget,
                                          std::optional<NanoPack::Any> args)
    : tag(tag), widget(std::move(widget)), args(std::move(args)) {}

Poly::Message::UpdateWidget::UpdateWidget(const NanoPack::Reader &reader,
                                          int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 16;

  const int32_t tag = reader.read_int32(ptr);
  ptr += 4;
  this->tag = tag;

  int widget_bytes_read = 0;
  widget = std::move(make_widget(begin + ptr, widget_bytes_read));
  ptr += widget_bytes_read;

  if (reader.read_field_size(2) < 0) {
    this->args = std::nullopt;
  } else {
    const int32_t args_byte_size = reader.read_field_size(2);
    args = NanoPack::Any(begin + ptr, begin + ptr + args_byte_size);
    ptr += args_byte_size;
  }

  bytes_read = ptr;
}

Poly::Message::UpdateWidget::UpdateWidget(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : UpdateWidget(NanoPack::Reader(begin), bytes_read) {}

Poly::Message::Widget &Poly::Message::UpdateWidget::get_widget() const {
  return *widget;
}

NanoPack::TypeId Poly::Message::UpdateWidget::type_id() const {
  return TYPE_ID;
}

int Poly::Message::UpdateWidget::header_size() const { return 16; }

size_t Poly::Message::UpdateWidget::write_to(std::vector<uint8_t> &buf,
                                             int offset) const {
  size_t bytes_written = 16;

  buf.resize(offset + 16);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  NanoPack::write_field_size(0, 4, offset, buf);
  NanoPack::append_int32(tag, buf);
  bytes_written += 4;

  const size_t widget_byte_size = widget->write_to(buf, buf.size());
  NanoPack::write_field_size(1, widget_byte_size, offset, buf);

  if (args.has_value()) {
    const auto args = this->args.value();
    NanoPack::write_field_size(2, args.size(), offset, buf);
    NanoPack::append_bytes(args.data(), buf);
    bytes_written += args.size();
  } else {
    NanoPack::write_field_size(2, -1, offset, buf);
  }

  return bytes_written;
}

std::vector<uint8_t> Poly::Message::UpdateWidget::data() const {
  std::vector<uint8_t> buf(16);
  write_to(buf, 0);
  return buf;
}
