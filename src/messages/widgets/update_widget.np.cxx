// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "update_widget.np.hxx"

UpdateWidget::UpdateWidget(int32_t tag, Widget widget)
    : tag(tag), widget(widget) {}

UpdateWidget::UpdateWidget(const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 12;

  const int32_t tag = reader.read_int32(ptr);
  ptr += 4;
  this->tag = tag;

  int widget_bytes_read = 0;
  widget = Widget(begin + ptr, widget_bytes_read);
  ptr += widget_bytes_read;

  bytes_read = ptr;
}

UpdateWidget::UpdateWidget(std::vector<uint8_t>::const_iterator begin,
                           int &bytes_read)
    : UpdateWidget(NanoPack::Reader(begin), bytes_read) {}

int32_t UpdateWidget::type_id() const { return TYPE_ID; }

std::vector<uint8_t> UpdateWidget::data() const {
  std::vector<uint8_t> buf(12);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_int32(tag);

  const std::vector<uint8_t> widget_data = widget.data();
  writer.append_bytes(widget_data);
  writer.write_field_size(1, widget_data.size());

  return buf;
}
