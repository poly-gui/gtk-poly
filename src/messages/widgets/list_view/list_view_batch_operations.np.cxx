// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "list_view_batch_operations.np.hxx"

Poly::Message::ListViewBatchOperations::ListViewBatchOperations(
    std::vector<std::unique_ptr<ListViewOperation>> operations)
    : operations(std::move(operations)) {}

Poly::Message::ListViewBatchOperations::ListViewBatchOperations(
    const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 8;

  const int32_t operations_vec_size = reader.read_int32(ptr);
  ptr += 4;
  std::vector<std::unique_ptr<ListViewOperation>> operations;
  operations.reserve(operations_vec_size);
  for (int i = 0; i < operations_vec_size; i++) {
    int i_item_bytes_read = 0;
    std::unique_ptr i_item =
        std::move(make_list_view_operation(begin + ptr, i_item_bytes_read));
    ptr += i_item_bytes_read;
    operations.emplace_back(std::move(i_item));
  }
  this->operations = std::move(operations);

  bytes_read = ptr;
}

Poly::Message::ListViewBatchOperations::ListViewBatchOperations(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : ListViewBatchOperations(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::ListViewBatchOperations::type_id() const {
  return TYPE_ID;
}

int Poly::Message::ListViewBatchOperations::header_size() const { return 8; }

size_t
Poly::Message::ListViewBatchOperations::write_to(std::vector<uint8_t> &buf,
                                                 int offset) const {
  size_t bytes_written = 8;

  buf.resize(offset + 8);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  const size_t operations_vec_size = operations.size();
  NanoPack::append_int32(operations_vec_size, buf);
  int32_t operations_byte_size = sizeof(int32_t);
  for (auto &i : operations) {
    const size_t i_byte_size = i->write_to(buf, buf.size());
    operations_byte_size += i_byte_size;
  }
  NanoPack::write_field_size(0, operations_byte_size, offset, buf);
  bytes_written += operations_byte_size;

  return bytes_written;
}

std::vector<uint8_t> Poly::Message::ListViewBatchOperations::data() const {
  std::vector<uint8_t> buf(8);
  write_to(buf, 0);
  return buf;
}
