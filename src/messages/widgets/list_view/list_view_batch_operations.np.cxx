// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "list_view_batch_operations.np.hxx"

Poly::Message::ListViewBatchOperations::ListViewBatchOperations(
    std::vector<std::unique_ptr<ListViewOperation>> operations)
    : operations(std::move(operations)) {}

Poly::Message::ListViewBatchOperations::ListViewBatchOperations(
    const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 8;

  const int32_t operations_vec_size = reader.read_int32(ptr);
  ptr += 4;
  std::vector<std::unique_ptr<ListViewOperation>> operations;
  operations.reserve(operations_vec_size);
  for (int i = 0; i < operations_vec_size; i++) {
    int i_item_bytes_read = 0;
    std::unique_ptr i_item =
        std::move(make_list_view_operation(begin + ptr, i_item_bytes_read));
    ptr += i_item_bytes_read;
    operations.emplace_back(std::move(i_item));
  }
  this->operations = std::move(operations);

  bytes_read = ptr;
}

Poly::Message::ListViewBatchOperations::ListViewBatchOperations(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : ListViewBatchOperations(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::ListViewBatchOperations::type_id() const {
  return TYPE_ID;
}

std::vector<uint8_t> Poly::Message::ListViewBatchOperations::data() const {
  std::vector<uint8_t> buf(8);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  const size_t operations_vec_size = operations.size();
  writer.append_int32(operations_vec_size);
  int32_t operations_byte_size = sizeof(int32_t);
  for (auto &i : operations) {
    const std::vector<uint8_t> i_data = i->data();
    writer.append_bytes(i_data);
    operations_byte_size += i_data.size();
  }
  writer.write_field_size(0, operations_byte_size);

  return buf;
}

std::vector<uint8_t>
Poly::Message::ListViewBatchOperations::data_with_length_prefix() const {
  std::vector<uint8_t> buf(8 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  const size_t operations_vec_size = operations.size();
  writer.append_int32(operations_vec_size);
  int32_t operations_byte_size = sizeof(int32_t);
  for (auto &i : operations) {
    const std::vector<uint8_t> i_data = i->data();
    writer.append_bytes(i_data);
    operations_byte_size += i_data.size();
  }
  writer.write_field_size(0, operations_byte_size);

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
