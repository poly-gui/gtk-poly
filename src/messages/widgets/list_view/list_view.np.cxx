// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "list_view.np.hxx"

Poly::Message::ListView::ListView(std::optional<int32_t> tag, double width,
                                  double height, std::vector<uint32_t> sections,
                                  double item_height, int32_t on_create,
                                  int32_t on_bind)
    : Widget(tag), width(width), height(height), sections(std::move(sections)),
      item_height(item_height), on_create(on_create), on_bind(on_bind) {}

Poly::Message::ListView::ListView(const NanoPack::Reader &reader,
                                  int &bytes_read)
    : Widget() {
  const auto begin = reader.begin();
  int ptr = 32;

  if (reader.read_field_size(0) < 0) {
    this->tag = std::nullopt;
  } else {
    const int32_t tag = reader.read_int32(ptr);
    ptr += 4;
    this->tag = tag;
  }

  const double width = reader.read_double(ptr);
  ptr += 8;
  this->width = width;

  const double height = reader.read_double(ptr);
  ptr += 8;
  this->height = height;

  const int32_t sections_byte_size = reader.read_field_size(3);
  const int32_t sections_vec_size = sections_byte_size / 4;
  std::vector<uint32_t> sections;
  sections.reserve(sections_vec_size);
  for (int i = 0; i < sections_vec_size; i++) {
    const uint32_t i_item = reader.read_uint32(ptr);
    ptr += 4;
    sections.emplace_back(std::move(i_item));
  }
  this->sections = std::move(sections);

  const double item_height = reader.read_double(ptr);
  ptr += 8;
  this->item_height = item_height;

  const int32_t on_create = reader.read_int32(ptr);
  ptr += 4;
  this->on_create = on_create;

  const int32_t on_bind = reader.read_int32(ptr);
  ptr += 4;
  this->on_bind = on_bind;

  bytes_read = ptr;
}

Poly::Message::ListView::ListView(std::vector<uint8_t>::const_iterator begin,
                                  int &bytes_read)
    : ListView(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::ListView::type_id() const { return TYPE_ID; }

std::vector<uint8_t> Poly::Message::ListView::data() const {
  std::vector<uint8_t> buf(32);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    writer.write_field_size(0, 4);
    writer.append_int32(tag);
  } else {
    writer.write_field_size(0, -1);
  }

  writer.write_field_size(1, 8);
  writer.append_double(width);

  writer.write_field_size(2, 8);
  writer.append_double(height);

  writer.write_field_size(3, sections.size() * 4);
  for (const auto &i : sections) {
    writer.append_uint32(i);
  }

  writer.write_field_size(4, 8);
  writer.append_double(item_height);

  writer.write_field_size(5, 4);
  writer.append_int32(on_create);

  writer.write_field_size(6, 4);
  writer.append_int32(on_bind);

  return buf;
}

std::vector<uint8_t> Poly::Message::ListView::data_with_length_prefix() const {
  std::vector<uint8_t> buf(32 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  if (tag.has_value()) {
    const auto tag = this->tag.value();
    writer.write_field_size(0, 4);
    writer.append_int32(tag);
  } else {
    writer.write_field_size(0, -1);
  }

  writer.write_field_size(1, 8);
  writer.append_double(width);

  writer.write_field_size(2, 8);
  writer.append_double(height);

  writer.write_field_size(3, sections.size() * 4);
  for (const auto &i : sections) {
    writer.append_uint32(i);
  }

  writer.write_field_size(4, 8);
  writer.append_double(item_height);

  writer.write_field_size(5, 4);
  writer.append_int32(on_create);

  writer.write_field_size(6, 4);
  writer.append_int32(on_bind);

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
