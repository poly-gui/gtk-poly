// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "list_view_delete_operation.np.hxx"

Poly::Message::ListViewDeleteOperation::ListViewDeleteOperation(
    int32_t tag, std::vector<int32_t> delete_at)
    : ListViewOperation(tag), delete_at(std::move(delete_at)) {}

Poly::Message::ListViewDeleteOperation::ListViewDeleteOperation(
    const NanoPack::Reader &reader, int &bytes_read)
    : ListViewOperation() {
  const auto begin = reader.begin();
  int ptr = 12;

  const int32_t tag = reader.read_int32(ptr);
  ptr += 4;
  this->tag = tag;

  const int32_t delete_at_byte_size = reader.read_field_size(1);
  const int32_t delete_at_vec_size = delete_at_byte_size / 4;
  std::vector<int32_t> delete_at;
  delete_at.reserve(delete_at_vec_size);
  for (int i = 0; i < delete_at_vec_size; i++) {
    const int32_t i_item = reader.read_int32(ptr);
    ptr += 4;
    delete_at.emplace_back(std::move(i_item));
  }
  this->delete_at = std::move(delete_at);

  bytes_read = ptr;
}

Poly::Message::ListViewDeleteOperation::ListViewDeleteOperation(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : ListViewDeleteOperation(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::ListViewDeleteOperation::type_id() const {
  return TYPE_ID;
}

std::vector<uint8_t> Poly::Message::ListViewDeleteOperation::data() const {
  std::vector<uint8_t> buf(12);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_int32(tag);

  writer.write_field_size(1, delete_at.size() * 4);
  for (const auto &i : delete_at) {
    writer.append_int32(i);
  }

  return buf;
}

std::vector<uint8_t>
Poly::Message::ListViewDeleteOperation::data_with_length_prefix() const {
  std::vector<uint8_t> buf(12 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_int32(tag);

  writer.write_field_size(1, delete_at.size() * 4);
  for (const auto &i : delete_at) {
    writer.append_int32(i);
  }

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
