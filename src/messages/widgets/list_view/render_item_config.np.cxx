// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "render_item_config.np.hxx"

Poly::Message::RenderItemConfig::RenderItemConfig(
    int32_t section_index, int32_t item_index, std::optional<int32_t> item_tag)
    : section_index(section_index), item_index(item_index),
      item_tag(std::move(item_tag)) {}

Poly::Message::RenderItemConfig::RenderItemConfig(
    const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 16;

  const int32_t section_index = reader.read_int32(ptr);
  ptr += 4;
  this->section_index = section_index;

  const int32_t item_index = reader.read_int32(ptr);
  ptr += 4;
  this->item_index = item_index;

  if (reader.read_field_size(2) < 0) {
    this->item_tag = std::nullopt;
  } else {
    const int32_t item_tag = reader.read_int32(ptr);
    ptr += 4;
    this->item_tag = item_tag;
  }

  bytes_read = ptr;
}

Poly::Message::RenderItemConfig::RenderItemConfig(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : RenderItemConfig(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::RenderItemConfig::type_id() const {
  return TYPE_ID;
}

std::vector<uint8_t> Poly::Message::RenderItemConfig::data() const {
  std::vector<uint8_t> buf(16);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_int32(section_index);

  writer.write_field_size(1, 4);
  writer.append_int32(item_index);

  if (item_tag.has_value()) {
    const auto item_tag = this->item_tag.value();
    writer.write_field_size(2, 4);
    writer.append_int32(item_tag);
  } else {
    writer.write_field_size(2, -1);
  }

  return buf;
}

std::vector<uint8_t>
Poly::Message::RenderItemConfig::data_with_length_prefix() const {
  std::vector<uint8_t> buf(16 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_int32(section_index);

  writer.write_field_size(1, 4);
  writer.append_int32(item_index);

  if (item_tag.has_value()) {
    const auto item_tag = this->item_tag.value();
    writer.write_field_size(2, 4);
    writer.append_int32(item_tag);
  } else {
    writer.write_field_size(2, -1);
  }

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
