// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "ok_response.np.hxx"

Poly::Message::OkResponse::OkResponse(uint32_t request_id,
                                      std::optional<NanoPack::Any> body)
    : request_id(request_id), body(std::move(body)) {}

Poly::Message::OkResponse::OkResponse(const NanoPack::Reader &reader,
                                      int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 12;

  const uint32_t request_id = reader.read_uint32(ptr);
  ptr += 4;
  this->request_id = request_id;

  if (reader.read_field_size(1) < 0) {
    this->body = std::nullopt;
  } else {
    const int32_t body_byte_size = reader.read_field_size(1);
    body = NanoPack::Any(begin + ptr, begin + ptr + body_byte_size);
    ptr += body_byte_size;
  }

  bytes_read = ptr;
}

Poly::Message::OkResponse::OkResponse(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : OkResponse(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::OkResponse::type_id() const { return TYPE_ID; }

std::vector<uint8_t> Poly::Message::OkResponse::data() const {
  std::vector<uint8_t> buf(12);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_uint32(request_id);

  if (body.has_value()) {
    const auto body = this->body.value();
    writer.write_field_size(1, body.size());
    writer.append_bytes(body.data());
  } else {
    writer.write_field_size(1, -1);
  }

  return buf;
}

std::vector<uint8_t>
Poly::Message::OkResponse::data_with_length_prefix() const {
  std::vector<uint8_t> buf(12 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_uint32(request_id);

  if (body.has_value()) {
    const auto body = this->body.value();
    writer.write_field_size(1, body.size());
    writer.append_bytes(body.data());
  } else {
    writer.write_field_size(1, -1);
  }

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
