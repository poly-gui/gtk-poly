// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "invoke_callback.np.hxx"

Poly::Message::InvokeCallback::InvokeCallback(int32_t handle,
                                              NanoPack::Any args,
                                              std::optional<int32_t> reply_to)
    : handle(handle), args(std::move(args)), reply_to(std::move(reply_to)) {}

Poly::Message::InvokeCallback::InvokeCallback(const NanoPack::Reader &reader,
                                              int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 16;

  const int32_t handle = reader.read_int32(ptr);
  ptr += 4;
  this->handle = handle;

  const int32_t args_byte_size = reader.read_field_size(1);
  args = NanoPack::Any(begin + ptr, begin + ptr + args_byte_size);
  ptr += args_byte_size;

  if (reader.read_field_size(2) < 0) {
    this->reply_to = std::nullopt;
  } else {
    const int32_t reply_to = reader.read_int32(ptr);
    ptr += 4;
    this->reply_to = reply_to;
  }

  bytes_read = ptr;
}

Poly::Message::InvokeCallback::InvokeCallback(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : InvokeCallback(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::InvokeCallback::type_id() const {
  return TYPE_ID;
}

int Poly::Message::InvokeCallback::header_size() const { return 16; }

size_t Poly::Message::InvokeCallback::write_to(std::vector<uint8_t> &buf,
                                               int offset) const {
  size_t bytes_written = 16;

  buf.resize(offset + 16);

  NanoPack::write_type_id(TYPE_ID, offset, buf);

  NanoPack::write_field_size(0, 4, offset, buf);
  NanoPack::append_int32(handle, buf);
  bytes_written += 4;

  NanoPack::write_field_size(1, args.size(), offset, buf);
  NanoPack::append_bytes(args.data(), buf);
  bytes_written += args.size();

  if (reply_to.has_value()) {
    const auto reply_to = this->reply_to.value();
    NanoPack::write_field_size(2, 4, offset, buf);
    NanoPack::append_int32(reply_to, buf);
    bytes_written += 4;
  } else {
    NanoPack::write_field_size(2, -1, offset, buf);
  }

  return bytes_written;
}

std::vector<uint8_t> Poly::Message::InvokeCallback::data() const {
  std::vector<uint8_t> buf(16);
  write_to(buf, 0);
  return buf;
}
