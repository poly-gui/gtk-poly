// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "create_window.np.hxx"

Poly::Message::CreateWindow::CreateWindow(std::string title,
                                          std::string description,
                                          int32_t width, int32_t height,
                                          std::string tag)
    : title(std::move(title)), description(std::move(description)),
      width(width), height(height), tag(std::move(tag)) {}

Poly::Message::CreateWindow::CreateWindow(const NanoPack::Reader &reader,
                                          int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 24;

  const int32_t title_size = reader.read_field_size(0);
  title = reader.read_string(ptr, title_size);
  ptr += title_size;

  const int32_t description_size = reader.read_field_size(1);
  description = reader.read_string(ptr, description_size);
  ptr += description_size;

  const int32_t width = reader.read_int32(ptr);
  ptr += 4;
  this->width = width;

  const int32_t height = reader.read_int32(ptr);
  ptr += 4;
  this->height = height;

  const int32_t tag_size = reader.read_field_size(4);
  tag = reader.read_string(ptr, tag_size);
  ptr += tag_size;

  bytes_read = ptr;
}

Poly::Message::CreateWindow::CreateWindow(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : CreateWindow(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::CreateWindow::type_id() const {
  return TYPE_ID;
}

std::vector<uint8_t> Poly::Message::CreateWindow::data() const {
  std::vector<uint8_t> buf(24);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, title.size());
  writer.append_string(title);

  writer.write_field_size(1, description.size());
  writer.append_string(description);

  writer.write_field_size(2, 4);
  writer.append_int32(width);

  writer.write_field_size(3, 4);
  writer.append_int32(height);

  writer.write_field_size(4, tag.size());
  writer.append_string(tag);

  return buf;
}

std::vector<uint8_t>
Poly::Message::CreateWindow::data_with_length_prefix() const {
  std::vector<uint8_t> buf(24 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, title.size());
  writer.append_string(title);

  writer.write_field_size(1, description.size());
  writer.append_string(description);

  writer.write_field_size(2, 4);
  writer.append_int32(width);

  writer.write_field_size(3, 4);
  writer.append_int32(height);

  writer.write_field_size(4, tag.size());
  writer.append_string(tag);

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
