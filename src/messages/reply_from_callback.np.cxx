// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

#include <nanopack/reader.hxx>
#include <nanopack/writer.hxx>

#include "reply_from_callback.np.hxx"

Poly::Message::ReplyFromCallback::ReplyFromCallback(int32_t to,
                                                    NanoPack::Any args)
    : to(to), args(std::move(args)) {}

Poly::Message::ReplyFromCallback::ReplyFromCallback(
    const NanoPack::Reader &reader, int &bytes_read) {
  const auto begin = reader.begin();
  int ptr = 12;

  const int32_t to = reader.read_int32(ptr);
  ptr += 4;
  this->to = to;

  const int32_t args_byte_size = reader.read_field_size(1);
  args = NanoPack::Any(begin + ptr, begin + ptr + args_byte_size);
  ptr += args_byte_size;

  bytes_read = ptr;
}

Poly::Message::ReplyFromCallback::ReplyFromCallback(
    std::vector<uint8_t>::const_iterator begin, int &bytes_read)
    : ReplyFromCallback(NanoPack::Reader(begin), bytes_read) {}

NanoPack::TypeId Poly::Message::ReplyFromCallback::type_id() const {
  return TYPE_ID;
}

std::vector<uint8_t> Poly::Message::ReplyFromCallback::data() const {
  std::vector<uint8_t> buf(12);
  NanoPack::Writer writer(&buf);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_int32(to);

  writer.write_field_size(1, args.size());
  writer.append_bytes(args.data());

  return buf;
}

std::vector<uint8_t>
Poly::Message::ReplyFromCallback::data_with_length_prefix() const {
  std::vector<uint8_t> buf(12 + 4);
  NanoPack::Writer writer(&buf, 4);

  writer.write_type_id(TYPE_ID);

  writer.write_field_size(0, 4);
  writer.append_int32(to);

  writer.write_field_size(1, args.size());
  writer.append_bytes(args.data());

  const size_t byte_size = buf.size() - 4;
  buf[0] = byte_size & 0xFF;
  buf[1] = byte_size & 0xFF00;
  buf[2] = byte_size & 0xFF0000;
  buf[3] = byte_size & 0xFF000000;

  return buf;
}
